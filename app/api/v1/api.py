from fastapi import APIRouter, Form, HTTPException, UploadFile
from fastapi.params import File
from app.models.file_ask import FileAskRequest
from app.services.openai_service import get_chat_response
from app.services.process_file import query_file, save_and_process_file

router = APIRouter()

@router.post("/upload")
async def upload_file(file: UploadFile = File(...)):
    try:
        content = save_and_process_file(file.filename, await file.read())
        return {"message": f"File '{file.filename}' processed successfully.", "content": content}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/file-ask")
async def file_ask(request: FileAskRequest):
    try:
        # Retrieve the most relevant chunks from the file's vector database
        chunks = query_file(request.file_name, request.query)
        
        # Combine the chunks into a single context string
        context = "\n".join(chunks)
        
        # Return the answer generated by the model
        answer = get_chat_response(request.query, context)
        return {"answer": answer}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))